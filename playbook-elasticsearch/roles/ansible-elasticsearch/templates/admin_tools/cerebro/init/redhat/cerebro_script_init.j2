#! /bin/sh
# /etc/init.d/{{ cerebro_user }}: start the cerebro daemon.

# chkconfig: - 80 20
# description: cerebro

CEREBRO_USER={{ cerebro_user }}
CEREBRO_SCRIPT={{ cerebro_bin_dir }}/cerebro
CEREBRO_CONSOLE_LOG={{ cerebro_log_dirÂ }}/cerebro_startup_console.log
CEREBRO_PORT={{ cerebro_port }}

PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin

prog={{ cerebro_service }}
DESC="cerebro daemon"

RETVAL=0
STARTUP_WAIT=30
SHUTDOWN_WAIT=30

CEREBRO_PIDFILE={{ cerebro_pid_dir }}/cerebro.pid


# Source function library.
. /etc/init.d/functions

start() {
  echo -n $"Starting $prog: "

        # Create pid file
        if [ -f $CEREBRO_PIDFILE ]; then
                read ppid < $CEREBRO_PIDFILE
                if [ `ps --pid $ppid 2> /dev/null | grep -c java 2> /dev/null` -eq '1' ]; then
                        echo -n "$prog is already running"
                        failure
                        echo
                        return 1
                else
                      rm -f $CEREBRO_PIDFILE
                fi
        fi

        rm -f $CEREBRO_CONSOLE_LOG
        su - $CEREBRO_USER -c "touch $CEREBRO_CONSOLE_LOG"
        mkdir -p $(dirname $CEREBRO_PIDFILE)
        chown $CEREBRO_USER $(dirname $CEREBRO_PIDFILE) || true

        # Run daemon
        cd /usr/bin/
        su $CEREBRO_USER -c "nohup sh $CEREBRO_SCRIPT -Dhttp.port=${CEREBRO_PORT} 2>&1 >> $CEREBRO_CONSOLE_LOG 2>&1 & echo \$! > '$CEREBRO_PIDFILE'"

        count=0
        launched=false

        until [ $count -gt $STARTUP_WAIT ]
        do
                grep 'started' $CEREBRO_CONSOLE_LOG > /dev/null
                if [ $? -eq 0 ] ; then
                        launched=true
                        break
                fi
                sleep 1
                let count=$count+1;
        done

        success
        echo
        return 0
}


stop() {
        echo -n $"Stopping $prog: "
        count=0;

        if [ -f $CEREBRO_PIDFILE ]; then
                read kpid < $CEREBRO_PIDFILE
                let kwait=$SHUTDOWN_WAIT

                # Try issuing SIGTERM
                kill -15 $kpid
                until [ `ps --pid $kpid 2> /dev/null | grep -c java 2> /dev/null` -eq '0' ] || [ $count -gt $kwait ]
                        do
                        sleep 1
                        let count=$count+1;
                done

                if [ $count -gt $kwait ]; then
                        kill -9 $kpid
                fi
        fi

        rm -f $CEREBRO_PIDFILE
        rm -f $CEREBRO_CONSOLE_LOG
        success
        echo
}

reload() {
        stop
        start
}

restart() {
        stop
        start
}

status() {
        if [ -f $CEREBRO_PIDFILE ]; then
                read ppid < $CEREBRO_PIDFILE
                if [ `ps --pid $ppid 2> /dev/null | grep -c java 2> /dev/null` -eq '1' ]; then
                        echo "$prog is running (pid $ppid)"
                        return 0
                else
                      echo "$prog dead but pid file exists"
                        return 1
                fi
        fi
        echo "$prog is not running"
        return 3
}

case "$1" in
start)
        start
        ;;

stop)
        stop
        ;;

reload)
        reload
        ;;

restart)
        restart
        ;;

status)
        status
        ;;
*)

echo $"Usage: $0 {start|stop|reload|restart|status}"
exit 1
esac

exit $?
